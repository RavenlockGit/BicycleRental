@page "/BicycleDetail/{bicycleId}"
@using BicycleRental.Client.Repositories;
@using BicycleRental.Shared.Models;

<h2>@_bicycle.Name</h2>
@if (@imageDataURL != null)
{
    <img src="@imageDataURL" />
}
<p>
    <label style="font-size:20px"><span style="font-weight:700">Brand:</span> @_bicycle.Brand</label>
    <br />
    <label style="font-size:20px"><span style="font-weight:700">Type:</span> @_bicycle.Type</label>
    <br />
    <label style="font-size:20px"><span style="font-weight:700">Place:</span> @_bicycle.Place</label>
    <br />
    <label style="font-size:20px"><span style="font-weight:700">Region:</span> @_bicycle.Region</label>
    <br />
    <label style="font-size:20px"><span style="font-weight:700">GearCount:</span> @_bicycle.GearCount</label>
    <br />
    <label style="font-size:20px"><span style="font-weight:700">TireSize:</span> @_bicycle.TireSize</label>
    <br />
    <br />
    <h3>Prize per Day: @_bicycle.PrizePerDay.ToString("C")</h3>
    <br />
    <br />

    @if (@imageDataURL2 != null)
    {
        <img src="@imageDataURL2" />
    }
    @if (@imageDataURL3 != null)
    {
        <img src="@imageDataURL3" />
    }
    @if (@imageDataURL4 != null)
    {
        <img src="@imageDataURL4" />
    }
</p>

@code {
    [Parameter]
    public string BicycleId { get; set; }

    private Bicycle _bicycle = new Bicycle();
    private List<Reservation> _reservations = new();

    [Inject]
    private BicycleRepository _bicycleRepository { get; set; }

    string imageDataURL;
    string imageDataURL2;
    string imageDataURL3;
    string imageDataURL4;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _bicycle = await _bicycleRepository.Details(int.Parse(BicycleId));

        imageDataURL = LoadImage(_bicycle.FrontPicture);
        imageDataURL2 = LoadImage(_bicycle.Picture2);
        imageDataURL3 = LoadImage(_bicycle.Picture3);
        imageDataURL4 = LoadImage(_bicycle.Picture4);
    }
    private string LoadImage(byte[] imgBytes)
    {
        if (imgBytes != null)
        {
            var imagesrc = Convert.ToBase64String(imgBytes);
            return string.Format("data:image/jfif;base64,{0}", imagesrc);
        }
        return null;
    }
}