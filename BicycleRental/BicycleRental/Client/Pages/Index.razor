@page "/"
@using BicycleRental.Client.Repositories;
@using BicycleRental.Shared.Models;

<PageTitle>Index</PageTitle>

<h1>Hello There!</h1>

<LoginComponent />

<h2 style="color:chartreuse">Welcome to your best and most liked bike rental place.</h2>
<div style="display:flex;">
    <div style="border:solid; border-width:medium; padding:5px">
        <div>

            <div>
                <h5>Reservation:</h5>
                From:
                <EditForm Model="@Filter">
                    <InputDate @bind-Value="Filter.StartDate" />
                </EditForm>
            </div>
            <div>
                To:
                <EditForm Model="@Filter">
                    <InputDate @bind-Value="Filter.EndDate" />
                </EditForm>
            </div>
            <br />
            <input type="text" placeholder="Name" @bind="Filter.Name" />
            <br />
            <br />
            <input type="text" placeholder="Marke" @bind="Filter.Brand" />
            <br />
            <br />
            <input type="text" placeholder="Place" @bind="Filter.Place" />
            <br />
            <br />
            <input type="text" placeholder="Region" @bind="Filter.Region" />
            <br />
            <br />
            <select class="form-control" @onchange="@SelectBikeType">
                @foreach (var type in Enum.GetValues(typeof(BikeType)))
                {
                    <option value="@type">@type</option>
                }
            </select>
            <br />
            <br />
            <br />
            <button @onclick="SearchButtonClicked">Search</button>
        </div>
    </div>
    <div style="margin-left:50px">
        <BicycleList Bicycle="_bicycles" />
    </div>
</div>


@code {
    [CascadingParameter]
    public BicycleFilter Filter { get; set; }

    private List<Bicycle> _bicycles = new List<Bicycle>();


    [Inject]
    private BicycleRepository bicycleRepository { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Filter = new BicycleFilter()
            {
                StartDate = DateTime.Now.AddDays(-5),
                EndDate = DateTime.Now.AddDays(60)
            };

        _bicycles = await InitBicycleList();
    }

    private async Task<List<Bicycle>> InitBicycleList()
    {
        var tmpList = await bicycleRepository.Index();
        if (tmpList == null)
        {
            return new List<Bicycle>();
        }

        return (tmpList).ToList();
    }

    private async void SearchButtonClicked()
    {
        var tmpList = await bicycleRepository.Search(Filter);
        if (tmpList == null)
        {
            _bicycles = new List<Bicycle>();
        }

        _bicycles = (tmpList).ToList();

        StateHasChanged();
    }

    private void SelectBikeType(ChangeEventArgs e)
    {
        BikeType bikeType;
        if (Enum.TryParse<BikeType>(e.Value.ToString(), out bikeType))
        {
            Filter.BikeType = bikeType;

        }
    }
}